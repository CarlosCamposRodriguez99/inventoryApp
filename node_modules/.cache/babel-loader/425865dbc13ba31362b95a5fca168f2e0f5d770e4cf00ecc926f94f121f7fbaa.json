{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ALIENWARE\\\\Documents\\\\inventario-app\\\\src\\\\pages\\\\cotizacion.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { collection, getDocs, addDoc } from 'firebase/firestore';\nimport { db } from '../firebaseConfig';\nimport Swal from 'sweetalert2';\nimport withReactContent from 'sweetalert2-react-content';\nimport CotizacionForm from '../components/CotizacionForm';\nimport TablaCotizaciones from '../components/TablaCotizaciones';\nimport PreviaCotizacion from '../components/PreviaCotizacion'; // Asegúrate de importar el componente PreviaCotizacion\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MySwal = withReactContent(Swal);\n_c = MySwal;\nfunction CotizacionesContainer() {\n  _s();\n  const [cotizaciones, setCotizaciones] = useState([]);\n  const [mostrarFormulario, setMostrarFormulario] = useState(true);\n  const [mostrarPrevia, setMostrarPrevia] = useState(false); // Agrega el estado para controlar la visibilidad de la previa\n  const [cotizacionSeleccionada, setCotizacionSeleccionada] = useState(null); // Agrega el estado para almacenar la cotización seleccionada\n\n  useEffect(() => {\n    obtenerCotizaciones();\n  }, []);\n  const obtenerCotizaciones = async () => {\n    try {\n      const cotizacionesSnapshot = await getDocs(collection(db, 'cotizaciones'));\n      const listaCotizaciones = cotizacionesSnapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data()\n      }));\n      setCotizaciones(listaCotizaciones);\n    } catch (error) {\n      console.error('Error al obtener las cotizaciones:', error);\n    }\n  };\n  const guardarCotizacion = async cotizacionData => {\n    try {\n      if (!cotizacionData.cliente || !cotizacionData.asunto || !cotizacionData.fechaVencimiento || cotizacionData.productosSeleccionados.length === 0) {\n        MySwal.fire({\n          icon: 'error',\n          title: 'Oops...',\n          text: 'Todos los campos son obligatorios'\n        });\n        return;\n      }\n      const docRef = await addDoc(collection(db, 'cotizaciones'), cotizacionData);\n      console.log('Cotización guardada con ID: ', docRef.id);\n      obtenerCotizaciones();\n      setMostrarFormulario(false);\n    } catch (error) {\n      console.error('Error al guardar la cotización:', error);\n    }\n  };\n  const verPrevia = cotizacion => {\n    setCotizacionSeleccionada(cotizacion);\n    setMostrarPrevia(true);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: mostrarFormulario ? /*#__PURE__*/_jsxDEV(CotizacionForm, {\n      guardarCotizacion: guardarCotizacion\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }, this) : mostrarPrevia ?\n    /*#__PURE__*/\n    // Mostrar la previa si mostrarPrevia es true\n    _jsxDEV(PreviaCotizacion, {\n      cotizacion: cotizacionSeleccionada,\n      cerrarPrevia: () => setMostrarPrevia(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(TablaCotizaciones, {\n      cotizaciones: cotizaciones,\n      verPrevia: verPrevia\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }, this) // Pasar la función verPrevia al componente TablaCotizaciones\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n}\n_s(CotizacionesContainer, \"MdIsav8/aoEX5avEXJhvTXH8oww=\");\n_c2 = CotizacionesContainer;\nexport default CotizacionesContainer;\nvar _c, _c2;\n$RefreshReg$(_c, \"MySwal\");\n$RefreshReg$(_c2, \"CotizacionesContainer\");","map":{"version":3,"names":["React","useState","useEffect","collection","getDocs","addDoc","db","Swal","withReactContent","CotizacionForm","TablaCotizaciones","PreviaCotizacion","jsxDEV","_jsxDEV","MySwal","_c","CotizacionesContainer","_s","cotizaciones","setCotizaciones","mostrarFormulario","setMostrarFormulario","mostrarPrevia","setMostrarPrevia","cotizacionSeleccionada","setCotizacionSeleccionada","obtenerCotizaciones","cotizacionesSnapshot","listaCotizaciones","docs","map","doc","id","data","error","console","guardarCotizacion","cotizacionData","cliente","asunto","fechaVencimiento","productosSeleccionados","length","fire","icon","title","text","docRef","log","verPrevia","cotizacion","children","fileName","_jsxFileName","lineNumber","columnNumber","cerrarPrevia","_c2","$RefreshReg$"],"sources":["C:/Users/ALIENWARE/Documents/inventario-app/src/pages/cotizacion.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { collection, getDocs, addDoc } from 'firebase/firestore';\r\nimport { db } from '../firebaseConfig';\r\nimport Swal from 'sweetalert2';\r\nimport withReactContent from 'sweetalert2-react-content';\r\nimport CotizacionForm from '../components/CotizacionForm';\r\nimport TablaCotizaciones from '../components/TablaCotizaciones';\r\nimport PreviaCotizacion from '../components/PreviaCotizacion'; // Asegúrate de importar el componente PreviaCotizacion\r\n\r\nconst MySwal = withReactContent(Swal);\r\n\r\nfunction CotizacionesContainer() {\r\n  const [cotizaciones, setCotizaciones] = useState([]);\r\n  const [mostrarFormulario, setMostrarFormulario] = useState(true);\r\n  const [mostrarPrevia, setMostrarPrevia] = useState(false); // Agrega el estado para controlar la visibilidad de la previa\r\n  const [cotizacionSeleccionada, setCotizacionSeleccionada] = useState(null); // Agrega el estado para almacenar la cotización seleccionada\r\n\r\n  useEffect(() => {\r\n    obtenerCotizaciones();\r\n  }, []);\r\n\r\n  const obtenerCotizaciones = async () => {\r\n    try {\r\n      const cotizacionesSnapshot = await getDocs(collection(db, 'cotizaciones'));\r\n      const listaCotizaciones = cotizacionesSnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));\r\n      setCotizaciones(listaCotizaciones);\r\n    } catch (error) {\r\n      console.error('Error al obtener las cotizaciones:', error);\r\n    }\r\n  };\r\n\r\n  const guardarCotizacion = async (cotizacionData) => {\r\n    try {\r\n      if (!cotizacionData.cliente || !cotizacionData.asunto || !cotizacionData.fechaVencimiento || cotizacionData.productosSeleccionados.length === 0) {\r\n        MySwal.fire({\r\n          icon: 'error',\r\n          title: 'Oops...',\r\n          text: 'Todos los campos son obligatorios',\r\n        });\r\n        return;\r\n      }\r\n\r\n      const docRef = await addDoc(collection(db, 'cotizaciones'), cotizacionData);\r\n      console.log('Cotización guardada con ID: ', docRef.id);\r\n      obtenerCotizaciones();\r\n      setMostrarFormulario(false);\r\n    } catch (error) {\r\n      console.error('Error al guardar la cotización:', error);\r\n    }\r\n  };\r\n\r\n  const verPrevia = (cotizacion) => {\r\n    setCotizacionSeleccionada(cotizacion);\r\n    setMostrarPrevia(true);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {mostrarFormulario ? (\r\n        <CotizacionForm guardarCotizacion={guardarCotizacion} />\r\n      ) : mostrarPrevia ? ( // Mostrar la previa si mostrarPrevia es true\r\n        <PreviaCotizacion cotizacion={cotizacionSeleccionada} cerrarPrevia={() => setMostrarPrevia(false)} />\r\n      ) : (\r\n        <TablaCotizaciones cotizaciones={cotizaciones} verPrevia={verPrevia} /> // Pasar la función verPrevia al componente TablaCotizaciones\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CotizacionesContainer;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}